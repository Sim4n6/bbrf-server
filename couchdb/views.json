{
"views": {
    "scope": {
      "map": "function (doc) {\n  if(doc.type == \"program\") {\n    if(doc.inscope.length > 0) {\n      doc.inscope.forEach(function(scope) {\n        emit([!doc.disabled, \"IN\", scope], doc._id)\n      });\n    }\n    if(doc.outscope.length > 0) {\n      doc.outscope.forEach(function(scope) {\n        emit([!doc.disabled, \"OUT\", scope], doc._id)\n      });\n    }\n  }\n  \n}"
    },
    "search_tags": {
      "map": "function (doc) {\n  if(doc.tags) {\n    for(prop in doc.tags) {\n      if(Array.isArray(doc.tags[prop])) {\n        for(val in doc.tags[prop]) {\n          emit([prop, doc.tags[prop][val]], [doc.type, doc._id, doc.program ? doc.program : doc._id])\n        }\n      } else {\n        emit([prop, doc.tags[prop]], [doc.type, doc._id, doc.program ? doc.program : doc._id])\n      }\n    }\n    \n  }\n  if(doc.ips && doc.ips.length > 0) {\n    for(ip in doc.ips) {\n        if(doc.ips[ip].length > 0) emit(['ip', doc.ips[ip]], [doc.type, doc._id, doc.program])\n    }\n  }\n  if(doc.domains) {\n      for(domain in doc.domains) {\n        if(doc.domains[domain].length > 0) emit(['domain', doc.domains[domain]], [doc.type, doc._id, doc.program])\n      }\n  }\n  \n  if(doc.type == 'program') {\n    emit(['disabled', doc.disabled+''], [doc.type, doc._id, doc._id])\n    emit(['passive_only', doc.passive_only+''], [doc.type, doc._id, doc._id])\n  }\n  \n  if(doc.type == 'service') {\n    emit(['ip', doc.ip], [doc.type, doc._id, doc.program])\n    emit(['service', doc.service], [doc.type, doc._id, doc.program])\n    emit(['port', doc.port+''], [doc.type, doc._id, doc.program])\n  }\n  \n  if(doc.type == 'url') {\n    emit(['port', doc.port+''], [doc.type, doc._id, doc.program])\n    emit(['hostname', doc.hostname], [doc.type, doc._id, doc.program])\n    emit(['scheme', doc.scheme], [doc.type, doc._id, doc.program])\n  }\n  \n  if(doc.source) {\n    emit(['source', doc.source], [doc.type, doc._id, doc.program])\n  }\n}"
    },
    "programs": {
      "reduce": "_count",
      "map": "function (doc) {\n  if(doc.type == \"program\")\n  emit(doc.disabled, doc.inscope.length, 1);\n}"
    },
    "alerts": {
      "map": "function (doc) {\n  if(doc.type == \"alert\")\n  emit(doc.timestamp, [doc.message, doc.source]);\n}"
    },
    "domains_unresolved": {
      "reduce": "_count",
      "map": "function (doc) {\n  if(doc.type == \"domain\" && (!doc.hasOwnProperty(\"ips\") || doc.ips.length === 0))\n  emit(doc.program, doc._id);\n}"
    },
    "tags": {
      "map": "function (doc) {\n  if(doc.tags) {\n    for(tag in doc.tags) {\n      if(Array.isArray(doc.tags[tag])) {\n        for(val in doc.tags[tag]) {\n          emit(tag, [doc._id, doc.tags[tag][val], doc.program ? doc.program : doc._id], 1)\n        }\n      } else {\n        emit(tag, [doc._id, doc.tags[tag], doc.program ? doc.program : doc._id], 1)\n      }\n    }\n  }\n}"
    },
    "domains": {
      "reduce": "_count",
      "map": "function (doc) {\n  if(doc.type == \"domain\")\n  emit(doc.program, doc._id);\n}"
    },
    "agents": {
      "map": "function (doc) {\n  if(doc.type == \"agent\")\n  emit( doc.name, 1);\n}"
    },
    "taskexecutions": {
      "map": "function (doc) {\n  if(doc.type == \"taskexecution\")\n  emit([doc.program, doc.task, doc.timestamp], doc.output);\n}"
    },
    "domains_resolved": {
      "reduce": "_count",
      "map": "function (doc) {\n  if(doc.type == \"domain\" && doc.ips.length > 0)\n  emit(doc.program, doc._id);\n}"
    },
    "ips_no_cdn": {
      "map": "function (doc) {\n  if(doc.type == \"ip\" && !(doc.tags && doc.tags.cdn))\n  emit(doc.program, doc._id);\n}"
    },
    "urls_by_hostname": {
      "reduce": "_count",
      "map": "function (doc) {\n  if (doc.type == \"url\")\n      emit(doc.hostname, [doc._id, doc.status, doc.content_length, doc.query])\n}"
    },
    "services": {
      "reduce": "_count",
      "map": "function (doc) {\n  if(doc.type == \"service\")\n  emit(doc.program, doc._id);\n}"
    },
    "ips": {
      "reduce": "_count",
      "map": "function (doc) {\n  if(doc.type == \"ip\")\n  emit(doc.program, doc._id);\n}"
    },
    "urls_by_program": {
      "reduce": "_count",
      "map": "function (doc) {\n  if (doc.type == \"url\")\n      emit(doc.program, [doc._id, doc.status, doc.content_length, doc.query])\n}"
    },
    "tagnames_by_program_doctype": {
      "map": "function (doc) {\n  for( prop in doc.tags)\n    emit([doc.program ? doc.program : doc._id, doc.type], prop);\n}"
    },
    "tagnames_by_doctype": {
      "map": "function (doc) {\n  for( prop in doc.tags)\n    emit(doc.type, prop);\n}"
    },
    "program_all_documents": {
      "map": "function (doc) {\n  if(doc.type == 'program')\n    emit(doc._id, doc.type)\n  if(doc.hasOwnProperty('program'))\n    emit(doc.program, doc.type)\n}"
    },
    "domains_resolved_exclude_private": {
      "map": "function (doc) {\n  if(doc.type == \"domain\" && doc.ips.length > 0) {\n    var skip = false;\n    for(ip in doc.ips) {\n      var i = doc.ips[ip].split(\".\");\n      if(i[0] == \"10\" || (i[0] == \"192\" && i[1] == \"168\") || (i[0] === '172' && (parseInt(i[1], 10) >= 16 && i(parts[1], 10) <= 31)) ) {\n        skip = true;\n        break;\n      }\n    }\n    if (!skip) emit(doc.program, doc._id);\n  }\n}"
    }
  }
}